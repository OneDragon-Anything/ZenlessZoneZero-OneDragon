name: mirrorchyan_release_note

on:
  workflow_dispatch:
  release:
    types: [edited]
  workflow_run:
    workflows: ["Build and Release"]
    types:
      - completed

jobs:
  mirrorchyan_release_note:
    runs-on: macos-latest
    if: ${{ github.repository_owner == 'OneDragon-Anything' && (github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' || github.event_name == 'release') }}
    steps:
      - name: Get latest release
        id: get_release
        uses: actions/github-script@v7
        with:
          script: |
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 1
            });
            
            if (releases.length === 0) {
              core.setFailed('No releases found');
              return;
            }
            
            const release = releases[0];
            const tagName = release.tag_name;
            
            // 移除v前缀（如果存在）
            const version = tagName.replace(/^v/, '');
            
            // 检查是否为小版本（x.x.x格式，且第三位不为0）
            const versionParts = version.split('.');
            const isMinorVersion = versionParts.length === 3 && parseInt(versionParts[2]) > 0;
            
            core.setOutput('tag_name', tagName);
            core.setOutput('is_minor_version', isMinorVersion);
            core.setOutput('channel', isMinorVersion ? 'beta' : 'stable');
            
            console.log(`Version: ${version}`);
            console.log(`Is minor version: ${isMinorVersion}`);
            console.log(`Channel: ${isMinorVersion ? 'beta' : 'stable'}`);

      - name: Upload Release Note
        if: ${{ github.repository_owner == 'OneDragon-Anything' }}
        id: uploading
        uses: MirrorChyan/release-note-action@v1
        with:
          mirrorchyan_rid: ZZZ-OneDragon
          channel: ${{ steps.get_release.outputs.channel }}
          upload_token: ${{ secrets.MirrorChyanUploadToken }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
